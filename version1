using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;

namespace MineyGame
{

    public class Tile : Button
    {
        public static bool addFlag = false;
        public bool isFlagged = false;

        public TileState State { get; set; }

        public enum TileState
        {
            Zero = 0,
            One = 1,
            Two = 2,
            Three = 3,
            Four = 4,
            Five = 5,
            Six = 6,
            Seven = 7,
            Eight = 8,
            Default,
            Mine,

        }

        public void ChangeState()
        {
            switch (State)
            {
                case TileState.Zero:
                    Text = "";
                    BackColor = Color.DarkGray;
                    return;
                case TileState.One:
                    Text = "1";
                    BackColor = Color.LightCoral;
                    return;
                case TileState.Two:
                    Text = "2";
                    BackColor = Color.LightSalmon;
                    return;
                case TileState.Three:
                    Text = "3";
                    BackColor = Color.LightYellow;
                    return;
                case TileState.Four:
                    Text = "4";
                    BackColor = Color.LightGreen;
                    return;
                case TileState.Five:
                    Text = "5";
                    BackColor = Color.LightCyan;
                    return;
                case TileState.Six:
                    Text = "6";
                    BackColor = Color.LightSkyBlue;
                    return;
                case TileState.Seven:
                    Text = "7";
                    BackColor = Color.Plum;
                    return;
                case TileState.Eight:
                    Text = "8";
                    BackColor = Color.LightPink;
                    return;
                case TileState.Default:
                    Text = "";
                    BackColor = Color.LightGray;
                    return;
                case TileState.Mine:
                    Text = "";
                    BackColor = Color.LightGray;
                    return;

            }
        }

    }
    public partial class MineyGame : Form
    {
        public const int rows = 15;
        public const int cols = 15;
        public const int nOfMines = 40;
        public bool firstClick = true;
        Tile[,] tileControls = new Tile[rows, cols];
        

        public void GenerateMines(int x, int y)
        {
            Random rand = new Random();
            for (int i = 0; i < nOfMines; i++) //add bombs to game
            {
                //make random coordinate
                int randomRows = rand.Next(0, rows);
                int randomCols = rand.Next(0, cols);
                //ensure there isn't already a bomb on coordinate
                while (tileControls[randomRows, randomCols].State == Tile.TileState.Mine || (randomRows == x && randomCols == y))
                {
                    randomRows = rand.Next(0, rows);
                    randomCols = rand.Next(0, cols);
                }
                tileControls[randomRows, randomCols].State = Tile.TileState.Mine; //add bomb
                tileControls[randomRows, randomCols].ChangeState();

            }

        }
        public void ShowMines()
        {
            foreach (Tile tile in tileControls)
            {
                if (tile.State == Tile.TileState.Mine)
                {
                    tile.Text = "☠";
                    tile.BackColor = Color.Red;
                    
                }
            }
        }
        public void CheckWin()
        {
            List<Tile> openedTiles = new List<Tile>();
            foreach (Tile tile in tileControls)
            {
                if (tile.State != Tile.TileState.Default && tile.State != Tile.TileState.Mine)
                {
                    openedTiles.Add(tile);
                }
            }
            if (openedTiles.Count == (rows * cols) - nOfMines)
            {
                MessageBox.Show("You won!");
            }
        }
        public void CalculateNumbers(int xx, int yy)
        {
            Point[] offset = {  new Point(-1, -1),
                new Point(0, -1),
                new Point(1, -1),
                new Point(-1, 0),
                new Point(1, 0),
                new Point(-1, 1),
                new Point(0, 1),
                new Point(1, 1)};
            int mineCounter;
            for (int y = 0; y < cols; y++)
            {
                for (int x = 0; x < rows; x++)
                {
                    mineCounter = 0;
                    if (tileControls[x, y].State != Tile.TileState.Mine)
                    {
                        for (int i = 0; i < offset.Length; i++)
                        {
                            try
                            {
                                if (tileControls[x + offset[i].X, y + offset[i].Y].State == Tile.TileState.Mine)
                                {
                                    mineCounter++;
                                }
                            }
                            catch (IndexOutOfRangeException) { }
                        }
                        tileControls[x, y].State = (Tile.TileState)mineCounter;
                        tileControls[xx, yy].ChangeState();
                    }

                }
            }
        }
        public void ShowOthers(int x, int y)
        {
            Queue<Point> queue = new Queue<Point>();
            Dictionary<Point, bool> withoutMine = new Dictionary<Point, bool>();
            queue.Enqueue(new Point(x,y)); //add as last item
            withoutMine[new Point(x,y)] = true;
            Point[] offset =
                {
                    new Point(1, 0),
                    new Point(-1, 0),
                    new Point(0, 1),
                    new Point(0, -1),
                    new Point(1,1),
                    new Point(1,-1),
                    new Point(-1,1),
                    new Point(-1,-1)
                };
            while (queue.Count != 0)
            {
                Point currentTile = queue.Dequeue(); //get first item
                foreach (Point dir in offset)
                {
                    int xx = currentTile.X + dir.X;
                    int yy = currentTile.Y + dir.Y;
                    if (withoutMine.ContainsKey(new Point(xx, yy)))
                    {
                        continue;
                    }
                    try
                    {
                        if (tileControls[xx,yy].State != Tile.TileState.Mine)
                        {
                            tileControls[xx, yy].ChangeState();
                            withoutMine[new Point(xx, yy)] = true;
                            if (tileControls[xx,yy].State == Tile.TileState.Zero)
                            {
                                queue.Enqueue(new Point(xx, yy));
                            }
                            
                        }
                    }
                    catch (IndexOutOfRangeException) { }
                }
            }
           
        }
        public MineyGame()
        {
            InitializeComponent();
            PlayGame();
        }


        private void btnAddFlag_Click(object sender, EventArgs e)
        {
            Tile.addFlag = true;
        }
        public void PlayGame()
        {
            //create matrix
            for (int y = 0; y < cols; y++)
            {
                for (int x = 0; x < rows; x++)
                {
                    Tile tile = new Tile()
                    {
                        Size = new Size(25, 25),
                        Location = new Point(x * (rows + 5), y * (cols + 5)),
                        Visible = true,
                        State = Tile.TileState.Default
                    };
                    this.Controls.Add(tile);
                    tile.ChangeState();
                    tileControls[x, y] = tile;
                    int xx = x;
                    int yy = y;
                    tile.Click += (sender, args) =>
                    {

                        if (!Tile.addFlag)

                        {
                            if (tile.isFlagged)
                            {
                                tile.Text = "";
                                tile.isFlagged = false;
                                return;
                            }

                            if (firstClick)
                            {
                                GenerateMines(xx, yy);
                                firstClick = false;
                            }
                          
                            if (tile.State == Tile.TileState.Mine)
                                {
                                  Debug.WriteLine("Bomb");
                                  ShowMines();
                                  return;
                                 }

                            CalculateNumbers(xx,yy);
                            if (tile.State == Tile.TileState.Zero)
                            {
                                ShowOthers(xx,yy);
                            }
                          
                        }
                        else if (tile.State == Tile.TileState.Default || tile.State == Tile.TileState.Mine)
                        {
                            tile.Text = "⚑";
                            tile.isFlagged = true;
                            Tile.addFlag = false;
                            //return;

                        }
                        //tile.ChangeState();
                    };
                }
            }
        }
    }
}
